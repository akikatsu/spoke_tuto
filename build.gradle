/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10.2/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'

    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // code coverage
    id 'jacoco'
}

sourceCompatibility = '1.8' // -source
targetCompatibility = '1.8' // -target

dependencies {

//    classpath "net.saliman:gradle-cobertura-plugin:2.5.4"

    compile "org.slf4j:slf4j-api:1.7.13"
    
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    testRuntime "ch.qos.logback:logback-core:1.1.3"
    testRuntime "ch.qos.logback:logback-classic:1.1.3"

    testRuntime "cglib:cglib-nodep:3.2.10"

    // Use the latest Groovy version for Spock testing
    testImplementation 'org.codehaus.groovy:groovy-all:2.4.15'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:1.1-groovy-2.4'
    testImplementation 'junit:junit:4.12'

    testImplementation "org.mockito:mockito-all:1.10.19"

    testImplementation "org.powermock:powermock-core:1.7.4"
    testImplementation "org.powermock:powermock-module-junit4:1.7.4"
    testImplementation "org.powermock:powermock-api-mockito:1.7.4"
    testImplementation "org.powermock:powermock-module-junit4-rule:1.7.4"
    testImplementation "org.powermock:powermock-module-junit4-rule-agent:1.7.4"

    testImplementation "org.powermock:powermock-classloading-xstream:1.7.4"

}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


